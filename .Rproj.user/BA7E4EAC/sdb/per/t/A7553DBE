{
    "contents" : "---\ntitle: \"Domestic Flight Map of China\"\nauthor: \"Xu Chen\"\ndate: \"Apirl 9, 2018\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\n```\n\n\nThe map is of all flight routes and airport information recorded by the [OpenFlights](https://openflights.org/data.html). The original dataset contained all routes and airports all over the world, but for the purpose of displaying flight of China the data need to be cleaned and visualized.\n\n```{r, fig.width=9.5, fig.height=5.5, fig.align='center', message=FALSE}\nairport_url  <- \"https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat\"; \nroute_url   <- \"https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat\"\n\nairport_data_file <- \"d:\\\\airports.dat\"\nroute_data_file  <- \"d:\\\\routes.dat\"\n\nif(!file.exists(route_data_file)) \n  download.file(route_url, destfile = route_data_file)\nif(!file.exists(airport_data_file))\n  download.file(airport_url,  destfile = airport_data_file)\n\ndata.port<- read.csv(airport_data_file,F)\ndata.line<- read.csv(route_data_file,F)\n\nlibrary(stringr)\n# Find the airport information of China\nportinchina <- str_detect(data.port[,'V4'], \"China\")\nchinaport <- data.port[portinchina,]\n# Delete the NA\nchinaport <-chinaport[chinaport$V5!='',\n                      c('V3','V5','V7','V8','V9')]\nnames(chinaport) <- c('city','code','lan','lon','att')\n\n# Find the domestic flight of China\n\nlineinchina <- (data.line[,'V3'] %in% chinaport$code) & (data.line[,'V5'] %in% chinaport$code)\nchinaline <- data.line[lineinchina,c('V3','V5','V9')]\nnames(chinaline) <- c('source','destination','equipment')\n\n# Function to get the lon and lat of airport\nfindposition <- function(code) {\n  find <- chinaport$code==code\n  x <- chinaport[find,'lon']\n  y <- chinaport[find,'lan']\n  return(data.frame(x,y))\n}\n\n# Convert the airport code to lat& lon\nfrom <- lapply(as.character(chinaline$source),findposition)\nfrom <- do.call('rbind',from)\nfrom$group <- 1:dim(from)[1]\nnames(from) <- c('lon','lan','group')\n\nto <- lapply(as.character(chinaline$destination),findposition)\nto <- do.call('rbind',to)\nto$group <-1:dim(to)[1]\nnames(to) <-c('lon','lan','group')\ndata.line <- rbind(from,to)\ntemp<- data.line[data.line$group<100,]\n\nlibrary(geosphere)\n\np1<- as.matrix(from[,c(1,2)])\np2<- as.matrix(to[,c(1,2)])\nLine <- gcIntermediate(p1,p2,n=100,addStartEnd = TRUE, sp=TRUE)\n\n\n\nlibrary(leaflet)\nm <- Line%>% leaflet() %>% setView(lng = 108.940178, lat = 34.341568, zoom=2)\nm %>% addProviderTiles(\"CartoDB.DarkMatterNoLabels\",options = ( providerTileOptions(minZoom = 2, maxZoom = 8))) %>%\n  addCircleMarkers(weight = 1,\n                   lat = chinaport$lan,\n                   lng = chinaport$lon,\n                   radius = 3,\n                   group = \"Airport\",\n                   color = \"pink\",\n                   popup = paste(\"Airport Name:\",chinaport$city,\"<br>\",\n                                 \"Code:\",chinaport$code))%>%\n   addPolylines(group=\"Flight Route\",weight=0.3,opacity=0.5, color=\"magenta\")%>% \n   addLayersControl(overlayGroups= c(\"Airport\",\"Flight Route\"),options=layersControlOptions(collapsed=FALSE))\n```\n<br>\n<center>\n####The above map was generated by using the following code. \n</center>\n\n\n```{r, eval=FALSE, message=FALSE, echo=TRUE}\nairport_url  <- \"https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat\"; \nroute_url   <- \"https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat\"\n\nairport_data_file <- \"d:\\\\airports.dat\"\nroute_data_file  <- \"d:\\\\routes.dat\"\n\nif(!file.exists(route_data_file)) \n  download.file(route_url, destfile = route_data_file)\nif(!file.exists(airport_data_file))\n  download.file(airport_url,  destfile = airport_data_file)\n\ndata.port<- read.csv(airport_data_file,F)\ndata.line<- read.csv(route_data_file,F)\n\nlibrary(stringr)\n# Find the airport information of China\nportinchina <- str_detect(data.port[,'V4'], \"China\")\nchinaport <- data.port[portinchina,]\n# Delete the NA\nchinaport <-chinaport[chinaport$V5!='',\n                      c('V3','V5','V7','V8','V9')]\nnames(chinaport) <- c('city','code','lan','lon','att')\n\n# Find the domestic flight of China\n\nlineinchina <- (data.line[,'V3'] %in% chinaport$code) & (data.line[,'V5'] %in% chinaport$code)\nchinaline <- data.line[lineinchina,c('V3','V5','V9')]\nnames(chinaline) <- c('source','destination','equipment')\n\n# Function to get the lon and lat of airport\nfindposition <- function(code) {\n  find <- chinaport$code==code\n  x <- chinaport[find,'lon']\n  y <- chinaport[find,'lan']\n  return(data.frame(x,y))\n}\n\n# Convert the airport code to lat& lon\nfrom <- lapply(as.character(chinaline$source),findposition)\nfrom <- do.call('rbind',from)\nfrom$group <- 1:dim(from)[1]\nnames(from) <- c('lon','lan','group')\n\nto <- lapply(as.character(chinaline$destination),findposition)\nto <- do.call('rbind',to)\nto$group <-1:dim(to)[1]\nnames(to) <-c('lon','lan','group')\ndata.line <- rbind(from,to)\ntemp<- data.line[data.line$group<100,]\n\nlibrary(geosphere)\n\np1<- as.matrix(from[,c(1,2)])\np2<- as.matrix(to[,c(1,2)])\nLine <- gcIntermediate(p1,p2,n=100,addStartEnd = TRUE, sp=TRUE)\n\n\n\nlibrary(leaflet)\nm <- Line%>% leaflet() %>% setView(lng = 108.940178, lat = 34.341568, zoom=2)\nm %>% addProviderTiles(\"CartoDB.DarkMatterNoLabels\",options = ( providerTileOptions(minZoom = 2, maxZoom = 8))) %>%\n  addCircleMarkers(weight = 1,\n                   lat = chinaport$lan,\n                   lng = chinaport$lon,\n                   radius = 3,\n                   group = \"Airport\",\n                   color = \"pink\",\n                   popup = paste(\"Airport Name:\",chinaport$city,\"<br>\",\n                                 \"Code:\",chinaport$code))%>%\n   addPolylines(group=\"Flight Route\",weight=0.3,opacity=0.5, color=\"magenta\")%>% \n   addLayersControl(overlayGroups= c(\"Airport\",\"Flight Route\"),options=layersControlOptions(collapsed=FALSE))\n```\n",
    "created" : 1523287045602.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4104427648",
    "id" : "A7553DBE",
    "lastKnownWriteTime" : 1523287049,
    "path" : "C:/Users/hp/Desktop/Visualized Map/Visualized Map/Domestic Flight Map of China.Rmd",
    "project_path" : "Domestic Flight Map of China.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_markdown"
}